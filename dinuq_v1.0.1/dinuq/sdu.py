from Bio import SeqIO
from Bio.Seq import Seq
import random
import math


###########################################################
###################         SDU         ###################
###########################################################

###########################################################
###################         RSDU         ##################
###########################################################



####       DICTIONARIES        ####

CpCpos1 = {'P': 1.0}
CpGpos1 = {'R': 0.6666666666666666}
CpUpos1 = {'L': 0.6666666666666666}
CpApos1 = {'Q': 1.0, 'H': 1.0}
GpCpos1 = {'A': 1.0}
GpGpos1 = {'G': 1.0}
GpUpos1 = {'V': 1.0}
GpApos1 = {'D': 1.0, 'E': 1.0}
UpCpos1 = {'S': 0.6666666666666666}
UpGpos1 = {'C': 1.0, 'W': 1.0}
UpUpos1 = {'F': 1.0, 'L': 0.3333333333333333}
UpApos1 = {'Y': 1.0}
ApCpos1 = {'T': 1.0}
ApGpos1 = {'S': 0.3333333333333333, 'R': 0.3333333333333333}
ApUpos1 = {'M': 1.0, 'I': 1.0}
ApApos1 = {'N': 1.0, 'K': 1.0}


CpCpos2 = {'S': 0.16666666666666666, 'P': 0.25, 'T': 0.25, 'A': 0.25}
CpGpos2 = {'S': 0.16666666666666666, 'P': 0.25, 'T': 0.25, 'A': 0.25}
CpUpos2 = {'S': 0.16666666666666666, 'P': 0.25, 'T': 0.25, 'A': 0.25}
CpApos2 = {'S': 0.16666666666666666, 'P': 0.25, 'T': 0.25, 'A': 0.25}
GpCpos2 = {'C': 0.5, 'S': 0.16666666666666666, 'G': 0.25, 'R': 0.16666666666666666}
GpGpos2 = {'G': 0.25, 'R': 0.3333333333333333, 'W': 1.0}
GpUpos2 = {'C': 0.5, 'S': 0.16666666666666666, 'G': 0.25, 'R': 0.16666666666666666}
GpApos2 = {'G': 0.25, 'R': 0.3333333333333333}
UpCpos2 = {'F': 0.5, 'I': 0.3333333333333333, 'L': 0.16666666666666666, 'V': 0.25}
UpGpos2 = {'M': 1.0, 'L': 0.3333333333333333, 'V': 0.25}
UpUpos2 = {'F': 0.5, 'I': 0.3333333333333333, 'L': 0.16666666666666666, 'V': 0.25}
UpApos2 = {'I': 0.3333333333333333, 'L': 0.3333333333333333, 'V': 0.25}
ApCpos2 = {'D': 0.5, 'N': 0.5, 'H': 0.5, 'Y': 0.5}
ApGpos2 = {'Q': 0.5, 'K': 0.5, 'E': 0.5}
ApUpos2 = {'D': 0.5, 'N': 0.5, 'H': 0.5, 'Y': 0.5}
ApApos2 = {'Q': 0.5, 'K': 0.5, 'E': 0.5}


CpCbridge = {'CQ': 0.5, 'CP': 0.5, 'CL': 0.3333333333333333, 'CH': 0.5, 'CR': 0.3333333333333333, 'DQ': 0.5, 'DP': 0.5, 'DL': 0.3333333333333333, 'DH': 0.5, 'DR': 0.3333333333333333, 'SQ': 0.3333333333333333, 'SP': 0.3333333333333333, 'SL': 0.2222222222222222, 'SH': 0.3333333333333333, 'SR': 0.2222222222222222, 'NQ': 0.5, 'NP': 0.5, 'NL': 0.3333333333333333, 'NH': 0.5, 'NR': 0.3333333333333333, 'PQ': 0.25, 'PP': 0.25, 'PL': 0.16666666666666666, 'PH': 0.25, 'PR': 0.16666666666666666, 'TQ': 0.25, 'TP': 0.25, 'TL': 0.16666666666666666, 'TH': 0.25, 'TR': 0.16666666666666666, 'FQ': 0.5, 'FP': 0.5, 'FL': 0.3333333333333333, 'FH': 0.5, 'FR': 0.3333333333333333, 'AQ': 0.25, 'AP': 0.25, 'AL': 0.16666666666666666, 'AH': 0.25, 'AR': 0.16666666666666666, 'GQ': 0.25, 'GP': 0.25, 'GL': 0.16666666666666666, 'GH': 0.25, 'GR': 0.16666666666666666, 'IQ': 0.3333333333333333, 'IP': 0.3333333333333333, 'IL': 0.2222222222222222, 'IH': 0.3333333333333333, 'IR': 0.2222222222222222, 'LQ': 0.16666666666666666, 'LP': 0.16666666666666666, 'LL': 0.1111111111111111, 'LH': 0.16666666666666666, 'LR': 0.1111111111111111, 'HQ': 0.5, 'HP': 0.5, 'HL': 0.3333333333333333, 'HH': 0.5, 'HR': 0.3333333333333333, 'RQ': 0.16666666666666666, 'RP': 0.16666666666666666, 'RL': 0.1111111111111111, 'RH': 0.16666666666666666, 'RR': 0.1111111111111111, 'VQ': 0.25, 'VP': 0.25, 'VL': 0.16666666666666666, 'VH': 0.25, 'VR': 0.16666666666666666, 'YQ': 0.5, 'YP': 0.5, 'YL': 0.3333333333333333, 'YH': 0.5, 'YR': 0.3333333333333333}
CpGbridge = {'CD': 0.5, 'CA': 0.5, 'CG': 0.5, 'CV': 0.5, 'CE': 0.5, 'DD': 0.5, 'DA': 0.5, 'DG': 0.5, 'DV': 0.5, 'DE': 0.5, 'SD': 0.3333333333333333, 'SA': 0.3333333333333333, 'SG': 0.3333333333333333, 'SV': 0.3333333333333333, 'SE': 0.3333333333333333, 'ND': 0.5, 'NA': 0.5, 'NG': 0.5, 'NV': 0.5, 'NE': 0.5, 'PD': 0.25, 'PA': 0.25, 'PG': 0.25, 'PV': 0.25, 'PE': 0.25, 'TD': 0.25, 'TA': 0.25, 'TG': 0.25, 'TV': 0.25, 'TE': 0.25, 'FD': 0.5, 'FA': 0.5, 'FG': 0.5, 'FV': 0.5, 'FE': 0.5, 'AD': 0.25, 'AA': 0.25, 'AG': 0.25, 'AV': 0.25, 'AE': 0.25, 'GD': 0.25, 'GA': 0.25, 'GG': 0.25, 'GV': 0.25, 'GE': 0.25, 'ID': 0.3333333333333333, 'IA': 0.3333333333333333, 'IG': 0.3333333333333333, 'IV': 0.3333333333333333, 'IE': 0.3333333333333333, 'LD': 0.16666666666666666, 'LA': 0.16666666666666666, 'LG': 0.16666666666666666, 'LV': 0.16666666666666666, 'LE': 0.16666666666666666, 'HD': 0.5, 'HA': 0.5, 'HG': 0.5, 'HV': 0.5, 'HE': 0.5, 'RD': 0.16666666666666666, 'RA': 0.16666666666666666, 'RG': 0.16666666666666666, 'RV': 0.16666666666666666, 'RE': 0.16666666666666666, 'VD': 0.25, 'VA': 0.25, 'VG': 0.25, 'VV': 0.25, 'VE': 0.25, 'YD': 0.5, 'YA': 0.5, 'YG': 0.5, 'YV': 0.5, 'YE': 0.5}
CpUbridge = {'CC': 0.5, 'CS': 0.3333333333333333, 'CF': 0.5, 'CL': 0.16666666666666666, 'CW': 0.5, 'CY': 0.5, 'DC': 0.5, 'DS': 0.3333333333333333, 'DF': 0.5, 'DL': 0.16666666666666666, 'DW': 0.5, 'DY': 0.5, 'SC': 0.3333333333333333, 'SS': 0.2222222222222222, 'SF': 0.3333333333333333, 'SL': 0.1111111111111111, 'SW': 0.3333333333333333, 'SY': 0.3333333333333333, 'NC': 0.5, 'NS': 0.3333333333333333, 'NF': 0.5, 'NL': 0.16666666666666666, 'NW': 0.5, 'NY': 0.5, 'PC': 0.25, 'PS': 0.16666666666666666, 'PF': 0.25, 'PL': 0.08333333333333333, 'PW': 0.25, 'PY': 0.25, 'TC': 0.25, 'TS': 0.16666666666666666, 'TF': 0.25, 'TL': 0.08333333333333333, 'TW': 0.25, 'TY': 0.25, 'FC': 0.5, 'FS': 0.3333333333333333, 'FF': 0.5, 'FL': 0.16666666666666666, 'FW': 0.5, 'FY': 0.5, 'AC': 0.25, 'AS': 0.16666666666666666, 'AF': 0.25, 'AL': 0.08333333333333333, 'AW': 0.25, 'AY': 0.25, 'GC': 0.25, 'GS': 0.16666666666666666, 'GF': 0.25, 'GL': 0.08333333333333333, 'GW': 0.25, 'GY': 0.25, 'IC': 0.3333333333333333, 'IS': 0.2222222222222222, 'IF': 0.3333333333333333, 'IL': 0.1111111111111111, 'IW': 0.3333333333333333, 'IY': 0.3333333333333333, 'LC': 0.16666666666666666, 'LS': 0.1111111111111111, 'LF': 0.16666666666666666, 'LL': 0.05555555555555555, 'LW': 0.16666666666666666, 'LY': 0.16666666666666666, 'HC': 0.5, 'HS': 0.3333333333333333, 'HF': 0.5, 'HL': 0.16666666666666666, 'HW': 0.5, 'HY': 0.5, 'RC': 0.16666666666666666, 'RS': 0.1111111111111111, 'RF': 0.16666666666666666, 'RL': 0.05555555555555555, 'RW': 0.16666666666666666, 'RY': 0.16666666666666666, 'VC': 0.25, 'VS': 0.16666666666666666, 'VF': 0.25, 'VL': 0.08333333333333333, 'VW': 0.25, 'VY': 0.25, 'YC': 0.5, 'YS': 0.3333333333333333, 'YF': 0.5, 'YL': 0.16666666666666666, 'YW': 0.5, 'YY': 0.5}
CpAbridge = {'CS': 0.16666666666666666, 'CM': 0.5, 'CN': 0.5, 'CK': 0.5, 'CT': 0.5, 'CI': 0.5, 'CR': 0.16666666666666666, 'DS': 0.16666666666666666, 'DM': 0.5, 'DN': 0.5, 'DK': 0.5, 'DT': 0.5, 'DI': 0.5, 'DR': 0.16666666666666666, 'SS': 0.1111111111111111, 'SM': 0.3333333333333333, 'SN': 0.3333333333333333, 'SK': 0.3333333333333333, 'ST': 0.3333333333333333, 'SI': 0.3333333333333333, 'SR': 0.1111111111111111, 'NS': 0.16666666666666666, 'NM': 0.5, 'NN': 0.5, 'NK': 0.5, 'NT': 0.5, 'NI': 0.5, 'NR': 0.16666666666666666, 'PS': 0.08333333333333333, 'PM': 0.25, 'PN': 0.25, 'PK': 0.25, 'PT': 0.25, 'PI': 0.25, 'PR': 0.08333333333333333, 'TS': 0.08333333333333333, 'TM': 0.25, 'TN': 0.25, 'TK': 0.25, 'TT': 0.25, 'TI': 0.25, 'TR': 0.08333333333333333, 'FS': 0.16666666666666666, 'FM': 0.5, 'FN': 0.5, 'FK': 0.5, 'FT': 0.5, 'FI': 0.5, 'FR': 0.16666666666666666, 'AS': 0.08333333333333333, 'AM': 0.25, 'AN': 0.25, 'AK': 0.25, 'AT': 0.25, 'AI': 0.25, 'AR': 0.08333333333333333, 'GS': 0.08333333333333333, 'GM': 0.25, 'GN': 0.25, 'GK': 0.25, 'GT': 0.25, 'GI': 0.25, 'GR': 0.08333333333333333, 'IS': 0.1111111111111111, 'IM': 0.3333333333333333, 'IN': 0.3333333333333333, 'IK': 0.3333333333333333, 'IT': 0.3333333333333333, 'II': 0.3333333333333333, 'IR': 0.1111111111111111, 'LS': 0.05555555555555555, 'LM': 0.16666666666666666, 'LN': 0.16666666666666666, 'LK': 0.16666666666666666, 'LT': 0.16666666666666666, 'LI': 0.16666666666666666, 'LR': 0.05555555555555555, 'HS': 0.16666666666666666, 'HM': 0.5, 'HN': 0.5, 'HK': 0.5, 'HT': 0.5, 'HI': 0.5, 'HR': 0.16666666666666666, 'RS': 0.05555555555555555, 'RM': 0.16666666666666666, 'RN': 0.16666666666666666, 'RK': 0.16666666666666666, 'RT': 0.16666666666666666, 'RI': 0.16666666666666666, 'RR': 0.05555555555555555, 'VS': 0.08333333333333333, 'VM': 0.25, 'VN': 0.25, 'VK': 0.25, 'VT': 0.25, 'VI': 0.25, 'VR': 0.08333333333333333, 'YS': 0.16666666666666666, 'YM': 0.5, 'YN': 0.5, 'YK': 0.5, 'YT': 0.5, 'YI': 0.5, 'YR': 0.16666666666666666}
GpCbridge = {'SQ': 0.16666666666666666, 'SP': 0.16666666666666666, 'SL': 0.1111111111111111, 'SH': 0.16666666666666666, 'SR': 0.1111111111111111, 'QQ': 0.5, 'QP': 0.5, 'QL': 0.3333333333333333, 'QH': 0.5, 'QR': 0.3333333333333333, 'MQ': 1.0, 'MP': 1.0, 'ML': 0.6666666666666666, 'MH': 1.0, 'MR': 0.6666666666666666, 'PQ': 0.25, 'PP': 0.25, 'PL': 0.16666666666666666, 'PH': 0.25, 'PR': 0.16666666666666666, 'KQ': 0.5, 'KP': 0.5, 'KL': 0.3333333333333333, 'KH': 0.5, 'KR': 0.3333333333333333, 'TQ': 0.25, 'TP': 0.25, 'TL': 0.16666666666666666, 'TH': 0.25, 'TR': 0.16666666666666666, 'AQ': 0.25, 'AP': 0.25, 'AL': 0.16666666666666666, 'AH': 0.25, 'AR': 0.16666666666666666, 'GQ': 0.25, 'GP': 0.25, 'GL': 0.16666666666666666, 'GH': 0.25, 'GR': 0.16666666666666666, 'LQ': 0.3333333333333333, 'LP': 0.3333333333333333, 'LL': 0.2222222222222222, 'LH': 0.3333333333333333, 'LR': 0.2222222222222222, 'RQ': 0.3333333333333333, 'RP': 0.3333333333333333, 'RL': 0.2222222222222222, 'RH': 0.3333333333333333, 'RR': 0.2222222222222222, 'WQ': 1.0, 'WP': 1.0, 'WL': 0.6666666666666666, 'WH': 1.0, 'WR': 0.6666666666666666, 'VQ': 0.25, 'VP': 0.25, 'VL': 0.16666666666666666, 'VH': 0.25, 'VR': 0.16666666666666666, 'EQ': 0.5, 'EP': 0.5, 'EL': 0.3333333333333333, 'EH': 0.5, 'ER': 0.3333333333333333}
GpGbridge = {'SD': 0.16666666666666666, 'SA': 0.16666666666666666, 'SG': 0.16666666666666666, 'SV': 0.16666666666666666, 'SE': 0.16666666666666666, 'QD': 0.5, 'QA': 0.5, 'QG': 0.5, 'QV': 0.5, 'QE': 0.5, 'MD': 1.0, 'MA': 1.0, 'MG': 1.0, 'MV': 1.0, 'ME': 1.0, 'PD': 0.25, 'PA': 0.25, 'PG': 0.25, 'PV': 0.25, 'PE': 0.25, 'KD': 0.5, 'KA': 0.5, 'KG': 0.5, 'KV': 0.5, 'KE': 0.5, 'TD': 0.25, 'TA': 0.25, 'TG': 0.25, 'TV': 0.25, 'TE': 0.25, 'AD': 0.25, 'AA': 0.25, 'AG': 0.25, 'AV': 0.25, 'AE': 0.25, 'GD': 0.25, 'GA': 0.25, 'GG': 0.25, 'GV': 0.25, 'GE': 0.25, 'LD': 0.3333333333333333, 'LA': 0.3333333333333333, 'LG': 0.3333333333333333, 'LV': 0.3333333333333333, 'LE': 0.3333333333333333, 'RD': 0.3333333333333333, 'RA': 0.3333333333333333, 'RG': 0.3333333333333333, 'RV': 0.3333333333333333, 'RE': 0.3333333333333333, 'WD': 1.0, 'WA': 1.0, 'WG': 1.0, 'WV': 1.0, 'WE': 1.0, 'VD': 0.25, 'VA': 0.25, 'VG': 0.25, 'VV': 0.25, 'VE': 0.25, 'ED': 0.5, 'EA': 0.5, 'EG': 0.5, 'EV': 0.5, 'EE': 0.5}
GpUbridge = {'SC': 0.16666666666666666, 'SS': 0.1111111111111111, 'SF': 0.16666666666666666, 'SL': 0.05555555555555555, 'SW': 0.16666666666666666, 'SY': 0.16666666666666666, 'QC': 0.5, 'QS': 0.3333333333333333, 'QF': 0.5, 'QL': 0.16666666666666666, 'QW': 0.5, 'QY': 0.5, 'MC': 1.0, 'MS': 0.6666666666666666, 'MF': 1.0, 'ML': 0.3333333333333333, 'MW': 1.0, 'MY': 1.0, 'PC': 0.25, 'PS': 0.16666666666666666, 'PF': 0.25, 'PL': 0.08333333333333333, 'PW': 0.25, 'PY': 0.25, 'KC': 0.5, 'KS': 0.3333333333333333, 'KF': 0.5, 'KL': 0.16666666666666666, 'KW': 0.5, 'KY': 0.5, 'TC': 0.25, 'TS': 0.16666666666666666, 'TF': 0.25, 'TL': 0.08333333333333333, 'TW': 0.25, 'TY': 0.25, 'AC': 0.25, 'AS': 0.16666666666666666, 'AF': 0.25, 'AL': 0.08333333333333333, 'AW': 0.25, 'AY': 0.25, 'GC': 0.25, 'GS': 0.16666666666666666, 'GF': 0.25, 'GL': 0.08333333333333333, 'GW': 0.25, 'GY': 0.25, 'LC': 0.3333333333333333, 'LS': 0.2222222222222222, 'LF': 0.3333333333333333, 'LL': 0.1111111111111111, 'LW': 0.3333333333333333, 'LY': 0.3333333333333333, 'RC': 0.3333333333333333, 'RS': 0.2222222222222222, 'RF': 0.3333333333333333, 'RL': 0.1111111111111111, 'RW': 0.3333333333333333, 'RY': 0.3333333333333333, 'WC': 1.0, 'WS': 0.6666666666666666, 'WF': 1.0, 'WL': 0.3333333333333333, 'WW': 1.0, 'WY': 1.0, 'VC': 0.25, 'VS': 0.16666666666666666, 'VF': 0.25, 'VL': 0.08333333333333333, 'VW': 0.25, 'VY': 0.25, 'EC': 0.5, 'ES': 0.3333333333333333, 'EF': 0.5, 'EL': 0.16666666666666666, 'EW': 0.5, 'EY': 0.5}
GpAbridge = {'SS': 0.05555555555555555, 'SM': 0.16666666666666666, 'SN': 0.16666666666666666, 'SK': 0.16666666666666666, 'ST': 0.16666666666666666, 'SI': 0.16666666666666666, 'SR': 0.05555555555555555, 'QS': 0.16666666666666666, 'QM': 0.5, 'QN': 0.5, 'QK': 0.5, 'QT': 0.5, 'QI': 0.5, 'QR': 0.16666666666666666, 'MS': 0.3333333333333333, 'MM': 1.0, 'MN': 1.0, 'MK': 1.0, 'MT': 1.0, 'MI': 1.0, 'MR': 0.3333333333333333, 'PS': 0.08333333333333333, 'PM': 0.25, 'PN': 0.25, 'PK': 0.25, 'PT': 0.25, 'PI': 0.25, 'PR': 0.08333333333333333, 'KS': 0.16666666666666666, 'KM': 0.5, 'KN': 0.5, 'KK': 0.5, 'KT': 0.5, 'KI': 0.5, 'KR': 0.16666666666666666, 'TS': 0.08333333333333333, 'TM': 0.25, 'TN': 0.25, 'TK': 0.25, 'TT': 0.25, 'TI': 0.25, 'TR': 0.08333333333333333, 'AS': 0.08333333333333333, 'AM': 0.25, 'AN': 0.25, 'AK': 0.25, 'AT': 0.25, 'AI': 0.25, 'AR': 0.08333333333333333, 'GS': 0.08333333333333333, 'GM': 0.25, 'GN': 0.25, 'GK': 0.25, 'GT': 0.25, 'GI': 0.25, 'GR': 0.08333333333333333, 'LS': 0.1111111111111111, 'LM': 0.3333333333333333, 'LN': 0.3333333333333333, 'LK': 0.3333333333333333, 'LT': 0.3333333333333333, 'LI': 0.3333333333333333, 'LR': 0.1111111111111111, 'RS': 0.1111111111111111, 'RM': 0.3333333333333333, 'RN': 0.3333333333333333, 'RK': 0.3333333333333333, 'RT': 0.3333333333333333, 'RI': 0.3333333333333333, 'RR': 0.1111111111111111, 'WS': 0.3333333333333333, 'WM': 1.0, 'WN': 1.0, 'WK': 1.0, 'WT': 1.0, 'WI': 1.0, 'WR': 0.3333333333333333, 'VS': 0.08333333333333333, 'VM': 0.25, 'VN': 0.25, 'VK': 0.25, 'VT': 0.25, 'VI': 0.25, 'VR': 0.08333333333333333, 'ES': 0.16666666666666666, 'EM': 0.5, 'EN': 0.5, 'EK': 0.5, 'ET': 0.5, 'EI': 0.5, 'ER': 0.16666666666666666}
UpCbridge = {'CQ': 0.5, 'CP': 0.5, 'CL': 0.3333333333333333, 'CH': 0.5, 'CR': 0.3333333333333333, 'DQ': 0.5, 'DP': 0.5, 'DL': 0.3333333333333333, 'DH': 0.5, 'DR': 0.3333333333333333, 'SQ': 0.3333333333333333, 'SP': 0.3333333333333333, 'SL': 0.2222222222222222, 'SH': 0.3333333333333333, 'SR': 0.2222222222222222, 'NQ': 0.5, 'NP': 0.5, 'NL': 0.3333333333333333, 'NH': 0.5, 'NR': 0.3333333333333333, 'PQ': 0.25, 'PP': 0.25, 'PL': 0.16666666666666666, 'PH': 0.25, 'PR': 0.16666666666666666, 'TQ': 0.25, 'TP': 0.25, 'TL': 0.16666666666666666, 'TH': 0.25, 'TR': 0.16666666666666666, 'FQ': 0.5, 'FP': 0.5, 'FL': 0.3333333333333333, 'FH': 0.5, 'FR': 0.3333333333333333, 'AQ': 0.25, 'AP': 0.25, 'AL': 0.16666666666666666, 'AH': 0.25, 'AR': 0.16666666666666666, 'GQ': 0.25, 'GP': 0.25, 'GL': 0.16666666666666666, 'GH': 0.25, 'GR': 0.16666666666666666, 'IQ': 0.3333333333333333, 'IP': 0.3333333333333333, 'IL': 0.2222222222222222, 'IH': 0.3333333333333333, 'IR': 0.2222222222222222, 'LQ': 0.16666666666666666, 'LP': 0.16666666666666666, 'LL': 0.1111111111111111, 'LH': 0.16666666666666666, 'LR': 0.1111111111111111, 'HQ': 0.5, 'HP': 0.5, 'HL': 0.3333333333333333, 'HH': 0.5, 'HR': 0.3333333333333333, 'RQ': 0.16666666666666666, 'RP': 0.16666666666666666, 'RL': 0.1111111111111111, 'RH': 0.16666666666666666, 'RR': 0.1111111111111111, 'VQ': 0.25, 'VP': 0.25, 'VL': 0.16666666666666666, 'VH': 0.25, 'VR': 0.16666666666666666, 'YQ': 0.5, 'YP': 0.5, 'YL': 0.3333333333333333, 'YH': 0.5, 'YR': 0.3333333333333333}
UpGbridge = {'CD': 0.5, 'CA': 0.5, 'CG': 0.5, 'CV': 0.5, 'CE': 0.5, 'DD': 0.5, 'DA': 0.5, 'DG': 0.5, 'DV': 0.5, 'DE': 0.5, 'SD': 0.3333333333333333, 'SA': 0.3333333333333333, 'SG': 0.3333333333333333, 'SV': 0.3333333333333333, 'SE': 0.3333333333333333, 'ND': 0.5, 'NA': 0.5, 'NG': 0.5, 'NV': 0.5, 'NE': 0.5, 'PD': 0.25, 'PA': 0.25, 'PG': 0.25, 'PV': 0.25, 'PE': 0.25, 'TD': 0.25, 'TA': 0.25, 'TG': 0.25, 'TV': 0.25, 'TE': 0.25, 'FD': 0.5, 'FA': 0.5, 'FG': 0.5, 'FV': 0.5, 'FE': 0.5, 'AD': 0.25, 'AA': 0.25, 'AG': 0.25, 'AV': 0.25, 'AE': 0.25, 'GD': 0.25, 'GA': 0.25, 'GG': 0.25, 'GV': 0.25, 'GE': 0.25, 'ID': 0.3333333333333333, 'IA': 0.3333333333333333, 'IG': 0.3333333333333333, 'IV': 0.3333333333333333, 'IE': 0.3333333333333333, 'LD': 0.16666666666666666, 'LA': 0.16666666666666666, 'LG': 0.16666666666666666, 'LV': 0.16666666666666666, 'LE': 0.16666666666666666, 'HD': 0.5, 'HA': 0.5, 'HG': 0.5, 'HV': 0.5, 'HE': 0.5, 'RD': 0.16666666666666666, 'RA': 0.16666666666666666, 'RG': 0.16666666666666666, 'RV': 0.16666666666666666, 'RE': 0.16666666666666666, 'VD': 0.25, 'VA': 0.25, 'VG': 0.25, 'VV': 0.25, 'VE': 0.25, 'YD': 0.5, 'YA': 0.5, 'YG': 0.5, 'YV': 0.5, 'YE': 0.5}
UpUbridge = {'CC': 0.5, 'CS': 0.3333333333333333, 'CF': 0.5, 'CL': 0.16666666666666666, 'CW': 0.5, 'CY': 0.5, 'DC': 0.5, 'DS': 0.3333333333333333, 'DF': 0.5, 'DL': 0.16666666666666666, 'DW': 0.5, 'DY': 0.5, 'SC': 0.3333333333333333, 'SS': 0.2222222222222222, 'SF': 0.3333333333333333, 'SL': 0.1111111111111111, 'SW': 0.3333333333333333, 'SY': 0.3333333333333333, 'NC': 0.5, 'NS': 0.3333333333333333, 'NF': 0.5, 'NL': 0.16666666666666666, 'NW': 0.5, 'NY': 0.5, 'PC': 0.25, 'PS': 0.16666666666666666, 'PF': 0.25, 'PL': 0.08333333333333333, 'PW': 0.25, 'PY': 0.25, 'TC': 0.25, 'TS': 0.16666666666666666, 'TF': 0.25, 'TL': 0.08333333333333333, 'TW': 0.25, 'TY': 0.25, 'FC': 0.5, 'FS': 0.3333333333333333, 'FF': 0.5, 'FL': 0.16666666666666666, 'FW': 0.5, 'FY': 0.5, 'AC': 0.25, 'AS': 0.16666666666666666, 'AF': 0.25, 'AL': 0.08333333333333333, 'AW': 0.25, 'AY': 0.25, 'GC': 0.25, 'GS': 0.16666666666666666, 'GF': 0.25, 'GL': 0.08333333333333333, 'GW': 0.25, 'GY': 0.25, 'IC': 0.3333333333333333, 'IS': 0.2222222222222222, 'IF': 0.3333333333333333, 'IL': 0.1111111111111111, 'IW': 0.3333333333333333, 'IY': 0.3333333333333333, 'LC': 0.16666666666666666, 'LS': 0.1111111111111111, 'LF': 0.16666666666666666, 'LL': 0.05555555555555555, 'LW': 0.16666666666666666, 'LY': 0.16666666666666666, 'HC': 0.5, 'HS': 0.3333333333333333, 'HF': 0.5, 'HL': 0.16666666666666666, 'HW': 0.5, 'HY': 0.5, 'RC': 0.16666666666666666, 'RS': 0.1111111111111111, 'RF': 0.16666666666666666, 'RL': 0.05555555555555555, 'RW': 0.16666666666666666, 'RY': 0.16666666666666666, 'VC': 0.25, 'VS': 0.16666666666666666, 'VF': 0.25, 'VL': 0.08333333333333333, 'VW': 0.25, 'VY': 0.25, 'YC': 0.5, 'YS': 0.3333333333333333, 'YF': 0.5, 'YL': 0.16666666666666666, 'YW': 0.5, 'YY': 0.5}
UpAbridge = {'CS': 0.16666666666666666, 'CM': 0.5, 'CN': 0.5, 'CK': 0.5, 'CT': 0.5, 'CI': 0.5, 'CR': 0.16666666666666666, 'DS': 0.16666666666666666, 'DM': 0.5, 'DN': 0.5, 'DK': 0.5, 'DT': 0.5, 'DI': 0.5, 'DR': 0.16666666666666666, 'SS': 0.1111111111111111, 'SM': 0.3333333333333333, 'SN': 0.3333333333333333, 'SK': 0.3333333333333333, 'ST': 0.3333333333333333, 'SI': 0.3333333333333333, 'SR': 0.1111111111111111, 'NS': 0.16666666666666666, 'NM': 0.5, 'NN': 0.5, 'NK': 0.5, 'NT': 0.5, 'NI': 0.5, 'NR': 0.16666666666666666, 'PS': 0.08333333333333333, 'PM': 0.25, 'PN': 0.25, 'PK': 0.25, 'PT': 0.25, 'PI': 0.25, 'PR': 0.08333333333333333, 'TS': 0.08333333333333333, 'TM': 0.25, 'TN': 0.25, 'TK': 0.25, 'TT': 0.25, 'TI': 0.25, 'TR': 0.08333333333333333, 'FS': 0.16666666666666666, 'FM': 0.5, 'FN': 0.5, 'FK': 0.5, 'FT': 0.5, 'FI': 0.5, 'FR': 0.16666666666666666, 'AS': 0.08333333333333333, 'AM': 0.25, 'AN': 0.25, 'AK': 0.25, 'AT': 0.25, 'AI': 0.25, 'AR': 0.08333333333333333, 'GS': 0.08333333333333333, 'GM': 0.25, 'GN': 0.25, 'GK': 0.25, 'GT': 0.25, 'GI': 0.25, 'GR': 0.08333333333333333, 'IS': 0.1111111111111111, 'IM': 0.3333333333333333, 'IN': 0.3333333333333333, 'IK': 0.3333333333333333, 'IT': 0.3333333333333333, 'II': 0.3333333333333333, 'IR': 0.1111111111111111, 'LS': 0.05555555555555555, 'LM': 0.16666666666666666, 'LN': 0.16666666666666666, 'LK': 0.16666666666666666, 'LT': 0.16666666666666666, 'LI': 0.16666666666666666, 'LR': 0.05555555555555555, 'HS': 0.16666666666666666, 'HM': 0.5, 'HN': 0.5, 'HK': 0.5, 'HT': 0.5, 'HI': 0.5, 'HR': 0.16666666666666666, 'RS': 0.05555555555555555, 'RM': 0.16666666666666666, 'RN': 0.16666666666666666, 'RK': 0.16666666666666666, 'RT': 0.16666666666666666, 'RI': 0.16666666666666666, 'RR': 0.05555555555555555, 'VS': 0.08333333333333333, 'VM': 0.25, 'VN': 0.25, 'VK': 0.25, 'VT': 0.25, 'VI': 0.25, 'VR': 0.08333333333333333, 'YS': 0.16666666666666666, 'YM': 0.5, 'YN': 0.5, 'YK': 0.5, 'YT': 0.5, 'YI': 0.5, 'YR': 0.16666666666666666}
ApCbridge = {'SQ': 0.16666666666666666, 'SP': 0.16666666666666666, 'SL': 0.1111111111111111, 'SH': 0.16666666666666666, 'SR': 0.1111111111111111, 'QQ': 0.5, 'QP': 0.5, 'QL': 0.3333333333333333, 'QH': 0.5, 'QR': 0.3333333333333333, 'PQ': 0.25, 'PP': 0.25, 'PL': 0.16666666666666666, 'PH': 0.25, 'PR': 0.16666666666666666, 'KQ': 0.5, 'KP': 0.5, 'KL': 0.3333333333333333, 'KH': 0.5, 'KR': 0.3333333333333333, 'TQ': 0.25, 'TP': 0.25, 'TL': 0.16666666666666666, 'TH': 0.25, 'TR': 0.16666666666666666, 'AQ': 0.25, 'AP': 0.25, 'AL': 0.16666666666666666, 'AH': 0.25, 'AR': 0.16666666666666666, 'GQ': 0.25, 'GP': 0.25, 'GL': 0.16666666666666666, 'GH': 0.25, 'GR': 0.16666666666666666, 'IQ': 0.3333333333333333, 'IP': 0.3333333333333333, 'IL': 0.2222222222222222, 'IH': 0.3333333333333333, 'IR': 0.2222222222222222, 'LQ': 0.3333333333333333, 'LP': 0.3333333333333333, 'LL': 0.2222222222222222, 'LH': 0.3333333333333333, 'LR': 0.2222222222222222, 'RQ': 0.3333333333333333, 'RP': 0.3333333333333333, 'RL': 0.2222222222222222, 'RH': 0.3333333333333333, 'RR': 0.2222222222222222, 'VQ': 0.25, 'VP': 0.25, 'VL': 0.16666666666666666, 'VH': 0.25, 'VR': 0.16666666666666666, 'EQ': 0.5, 'EP': 0.5, 'EL': 0.3333333333333333, 'EH': 0.5, 'ER': 0.3333333333333333}
ApGbridge = {'SD': 0.16666666666666666, 'SA': 0.16666666666666666, 'SG': 0.16666666666666666, 'SV': 0.16666666666666666, 'SE': 0.16666666666666666, 'QD': 0.5, 'QA': 0.5, 'QG': 0.5, 'QV': 0.5, 'QE': 0.5, 'PD': 0.25, 'PA': 0.25, 'PG': 0.25, 'PV': 0.25, 'PE': 0.25, 'KD': 0.5, 'KA': 0.5, 'KG': 0.5, 'KV': 0.5, 'KE': 0.5, 'TD': 0.25, 'TA': 0.25, 'TG': 0.25, 'TV': 0.25, 'TE': 0.25, 'AD': 0.25, 'AA': 0.25, 'AG': 0.25, 'AV': 0.25, 'AE': 0.25, 'GD': 0.25, 'GA': 0.25, 'GG': 0.25, 'GV': 0.25, 'GE': 0.25, 'ID': 0.3333333333333333, 'IA': 0.3333333333333333, 'IG': 0.3333333333333333, 'IV': 0.3333333333333333, 'IE': 0.3333333333333333, 'LD': 0.3333333333333333, 'LA': 0.3333333333333333, 'LG': 0.3333333333333333, 'LV': 0.3333333333333333, 'LE': 0.3333333333333333, 'RD': 0.3333333333333333, 'RA': 0.3333333333333333, 'RG': 0.3333333333333333, 'RV': 0.3333333333333333, 'RE': 0.3333333333333333, 'VD': 0.25, 'VA': 0.25, 'VG': 0.25, 'VV': 0.25, 'VE': 0.25, 'ED': 0.5, 'EA': 0.5, 'EG': 0.5, 'EV': 0.5, 'EE': 0.5}
ApUbridge = {'SC': 0.16666666666666666, 'SS': 0.1111111111111111, 'SF': 0.16666666666666666, 'SL': 0.05555555555555555, 'SW': 0.16666666666666666, 'SY': 0.16666666666666666, 'QC': 0.5, 'QS': 0.3333333333333333, 'QF': 0.5, 'QL': 0.16666666666666666, 'QW': 0.5, 'QY': 0.5, 'PC': 0.25, 'PS': 0.16666666666666666, 'PF': 0.25, 'PL': 0.08333333333333333, 'PW': 0.25, 'PY': 0.25, 'KC': 0.5, 'KS': 0.3333333333333333, 'KF': 0.5, 'KL': 0.16666666666666666, 'KW': 0.5, 'KY': 0.5, 'TC': 0.25, 'TS': 0.16666666666666666, 'TF': 0.25, 'TL': 0.08333333333333333, 'TW': 0.25, 'TY': 0.25, 'AC': 0.25, 'AS': 0.16666666666666666, 'AF': 0.25, 'AL': 0.08333333333333333, 'AW': 0.25, 'AY': 0.25, 'GC': 0.25, 'GS': 0.16666666666666666, 'GF': 0.25, 'GL': 0.08333333333333333, 'GW': 0.25, 'GY': 0.25, 'IC': 0.3333333333333333, 'IS': 0.2222222222222222, 'IF': 0.3333333333333333, 'IL': 0.1111111111111111, 'IW': 0.3333333333333333, 'IY': 0.3333333333333333, 'LC': 0.3333333333333333, 'LS': 0.2222222222222222, 'LF': 0.3333333333333333, 'LL': 0.1111111111111111, 'LW': 0.3333333333333333, 'LY': 0.3333333333333333, 'RC': 0.3333333333333333, 'RS': 0.2222222222222222, 'RF': 0.3333333333333333, 'RL': 0.1111111111111111, 'RW': 0.3333333333333333, 'RY': 0.3333333333333333, 'VC': 0.25, 'VS': 0.16666666666666666, 'VF': 0.25, 'VL': 0.08333333333333333, 'VW': 0.25, 'VY': 0.25, 'EC': 0.5, 'ES': 0.3333333333333333, 'EF': 0.5, 'EL': 0.16666666666666666, 'EW': 0.5, 'EY': 0.5}
ApAbridge = {'SS': 0.05555555555555555, 'SM': 0.16666666666666666, 'SN': 0.16666666666666666, 'SK': 0.16666666666666666, 'ST': 0.16666666666666666, 'SI': 0.16666666666666666, 'SR': 0.05555555555555555, 'QS': 0.16666666666666666, 'QM': 0.5, 'QN': 0.5, 'QK': 0.5, 'QT': 0.5, 'QI': 0.5, 'QR': 0.16666666666666666, 'PS': 0.08333333333333333, 'PM': 0.25, 'PN': 0.25, 'PK': 0.25, 'PT': 0.25, 'PI': 0.25, 'PR': 0.08333333333333333, 'KS': 0.16666666666666666, 'KM': 0.5, 'KN': 0.5, 'KK': 0.5, 'KT': 0.5, 'KI': 0.5, 'KR': 0.16666666666666666, 'TS': 0.08333333333333333, 'TM': 0.25, 'TN': 0.25, 'TK': 0.25, 'TT': 0.25, 'TI': 0.25, 'TR': 0.08333333333333333, 'AS': 0.08333333333333333, 'AM': 0.25, 'AN': 0.25, 'AK': 0.25, 'AT': 0.25, 'AI': 0.25, 'AR': 0.08333333333333333, 'GS': 0.08333333333333333, 'GM': 0.25, 'GN': 0.25, 'GK': 0.25, 'GT': 0.25, 'GI': 0.25, 'GR': 0.08333333333333333, 'IS': 0.1111111111111111, 'IM': 0.3333333333333333, 'IN': 0.3333333333333333, 'IK': 0.3333333333333333, 'IT': 0.3333333333333333, 'II': 0.3333333333333333, 'IR': 0.1111111111111111, 'LS': 0.1111111111111111, 'LM': 0.3333333333333333, 'LN': 0.3333333333333333, 'LK': 0.3333333333333333, 'LT': 0.3333333333333333, 'LI': 0.3333333333333333, 'LR': 0.1111111111111111, 'RS': 0.1111111111111111, 'RM': 0.3333333333333333, 'RN': 0.3333333333333333, 'RK': 0.3333333333333333, 'RT': 0.3333333333333333, 'RI': 0.3333333333333333, 'RR': 0.1111111111111111, 'VS': 0.08333333333333333, 'VM': 0.25, 'VN': 0.25, 'VK': 0.25, 'VT': 0.25, 'VI': 0.25, 'VR': 0.08333333333333333, 'ES': 0.16666666666666666, 'EM': 0.5, 'EN': 0.5, 'EK': 0.5, 'ET': 0.5, 'EI': 0.5, 'ER': 0.16666666666666666}




syco = { 
    "C": ["TGT", "TGC"], 
    "D": ["GAT", "GAC"], 
    "S": ["TCT", "TCG", "TCA", "TCC", "AGC", "AGT"], 
    "Q": ["CAA", "CAG"], 
    "M": ["ATG"], 
    "N": ["AAC", "AAT"], 
    "P": ["CCT", "CCG", "CCA", "CCC"], 
    "K": ["AAG", "AAA"], 
    "T": ["ACC", "ACA", "ACG", "ACT"], 
    "F": ["TTT", "TTC"], 
    "A": ["GCA", "GCC", "GCG", "GCT"], 
    "G": ["GGT", "GGG", "GGA", "GGC"], 
    "I": ["ATC", "ATA", "ATT"], 
    "L": ["TTA", "TTG", "CTC", "CTT", "CTG", "CTA"], 
    "H": ["CAT", "CAC"], 
    "R": ["CGA", "CGC", "CGG", "CGT", "AGG", "AGA"], 
    "W": ["TGG"], 
    "V": ["GTA", "GTC", "GTG", "GTT"], 
    "E": ["GAG", "GAA"], 
    "Y": ["TAT", "TAC"]} 
    
###################################
    


####       LISTS        ####

    
#non-informative dinucleotide positions that will be excluded
noninfo = ['CpCpos1', 'CpApos1', 'GpCpos1', 'GpGpos1', 'GpUpos1', 'GpApos1', 'UpGpos1', 'UpApos1', 'ApCpos1', 'ApUpos1', 'ApApos1']    
    

############################




#dinucl should be a list like: ['CpC', 'CpG', 'CpU', 'CpA', 'GpC', 'GpG', 'GpU', 'GpA', 'UpC', 'UpG', 'UpU', 'UpA', 'ApC', 'ApG', 'ApU', 'ApA']
#position should also be a list: ['pos1', 'pos2', 'bridge']

	
def SDU(fasta_file, dinucl, position = ['bridge'], samples = 'none'):    



    #define all results dictionary    
    all_results = {}



    #parse the multiple sequence fasta file
    records = SeqIO.parse(fasta_file, "fasta")	


    ####       FASTA        ####


    #for each sequence
    for rec in records:
    
        results = {}


        #ungap in case of an alignment
        recungap = rec.seq.ungap("-")
        recungap = rec.seq.ungap("~")
        
        #save sequence as string 
        seq = str(recungap)
        
        #make all uppercase
        seq = seq.upper()
        
        #make sure it's a coding sequence
        if len(seq)%3 != 0:
            print(str('\n\nSequence ' + rec.id + ' has length not a multiple of 3...\n\n'))
        
        
        #save amino acid sequence as string
        aa = str(recungap.translate())
        
        #remove stop codons at the end
        if aa[-1] == '*':
            aa = aa[:-1]
            seq = seq[:-3]
        
        #check for internal stop codons
        if '*' in aa:
            print(str('\n\nSequence ' + rec.id + ' has internal stop codons...\n\n'))
        
        

        #define list of all amino acid in the sequence 
        aalist = []
                
        #for each amino acid in the sequence (range of the length of the sequence)
        for a in range(len(aa)):
        
            #append it to the aa list
            aalist.append(aa[a])       
        
        
        #list with actual sequence as the first item, followed by all the model sequences
        all_the_seqs = [seq]
        
        #if the samples option has been selected
        if samples != 'none':
        
            #define how many random samples you take
            for i in range(samples):

                modelseq = "" 

                #for each amino acid in the peptide sequence
                for a in aa:
                
                    #randomly select one possible synonymous codon for the amino acid
                    ran_cod = random.choice(syco[a])
                    
                    #add the randomly selected codon to the model sequence
                    modelseq = modelseq + ran_cod
                    
                #add model sequence to the sequence list
                all_the_seqs.append(modelseq)
        

    ############################

        
        

        #for each dinucleotide provided in the argument list
        for dinuc in dinucl:
        
            #for each position provided in the argument list
            for pos in position:
            
            
            
                ####        PARAMETERS        ####
                
                #define the parameters mapping to each dinucleotide and position
        
                if dinuc == 'CpC':
                    thedinucleotide = 'CC'
                    if pos == 'bridge':
                        thedictionary = CpCbridge
                    if pos == 'pos1':
                        thedictionary = CpCpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = CpCpos2
                        pos_start = 1


                if dinuc == 'CpG':
                    thedinucleotide = 'CG'
                    if pos == 'bridge':
                        thedictionary = CpGbridge
                    if pos == 'pos1':
                        thedictionary = CpGpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = CpGpos2
                        pos_start = 1


                if dinuc == 'CpU':
                    thedinucleotide = 'CT'
                    if pos == 'bridge':
                        thedictionary = CpUbridge
                    if pos == 'pos1':
                        thedictionary = CpUpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = CpUpos2
                        pos_start = 1


                if dinuc == 'CpA':
                    thedinucleotide = 'CA'
                    if pos == 'bridge':
                        thedictionary = CpAbridge
                    if pos == 'pos1':
                        thedictionary = CpApos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = CpApos2
                        pos_start = 1


                if dinuc == 'GpC':
                    thedinucleotide = 'GC'
                    if pos == 'bridge':
                        thedictionary = GpCbridge
                    if pos == 'pos1':
                        thedictionary = GpCpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = GpCpos2
                        pos_start = 1


                if dinuc == 'GpG':
                    thedinucleotide = 'GG'
                    if pos == 'bridge':
                        thedictionary = GpGbridge
                    if pos == 'pos1':
                        thedictionary = GpGpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = GpGpos2
                        pos_start = 1


                if dinuc == 'GpU':
                    thedinucleotide = 'GT'
                    if pos == 'bridge':
                        thedictionary = GpUbridge
                    if pos == 'pos1':
                        thedictionary = GpUpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = GpUpos2
                        pos_start = 1


                if dinuc == 'GpA':
                    thedinucleotide = 'GA'
                    if pos == 'bridge':
                        thedictionary = GpAbridge
                    if pos == 'pos1':
                        thedictionary = GpApos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = GpApos2
                        pos_start = 1


                if dinuc == 'UpC':
                    thedinucleotide = 'TC'
                    if pos == 'bridge':
                        thedictionary = UpCbridge
                    if pos == 'pos1':
                        thedictionary = UpCpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = UpCpos2
                        pos_start = 1


                if dinuc == 'UpG':
                    thedinucleotide = 'TG'
                    if pos == 'bridge':
                        thedictionary = UpGbridge
                    if pos == 'pos1':
                        thedictionary = UpGpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = UpGpos2
                        pos_start = 1


                if dinuc == 'UpU':
                    thedinucleotide = 'TT'
                    if pos == 'bridge':
                        thedictionary = UpUbridge
                    if pos == 'pos1':
                        thedictionary = UpUpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = UpUpos2
                        pos_start = 1


                if dinuc == 'UpA':
                    thedinucleotide = 'TA'
                    if pos == 'bridge':
                        thedictionary = UpAbridge
                    if pos == 'pos1':
                        thedictionary = UpApos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = UpApos2
                        pos_start = 1


                if dinuc == 'ApC':
                    thedinucleotide = 'AC'
                    if pos == 'bridge':
                        thedictionary = ApCbridge
                    if pos == 'pos1':
                        thedictionary = ApCpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = ApCpos2
                        pos_start = 1


                if dinuc == 'ApG':
                    thedinucleotide = 'AG'
                    if pos == 'bridge':
                        thedictionary = ApGbridge
                    if pos == 'pos1':
                        thedictionary = ApGpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = ApGpos2
                        pos_start = 1


                if dinuc == 'ApU':
                    thedinucleotide = 'AT'
                    if pos == 'bridge':
                        thedictionary = ApUbridge
                    if pos == 'pos1':
                        thedictionary = ApUpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = ApUpos2
                        pos_start = 1


                if dinuc == 'ApA':
                    thedinucleotide = 'AA'
                    if pos == 'bridge':
                        thedictionary = ApAbridge
                    if pos == 'pos1':
                        thedictionary = ApApos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = ApApos2
                        pos_start = 1

                ##########################


                        

                ####   CALCULATIONS    ####                      
                
                #bridge

                
                if pos == 'bridge':
                
                    #define the name of dinucleotide and position you are executing in this loop 
                    name = str(str(dinuc) + str(pos))
                    
                
                    #use this counter to separate first sequence in the list from the model ones
                    c = 0
                    #calculate SDU for the observed sequence and all the model sequences
                    for sequ in all_the_seqs:
                    
                        #create lists for bridge dinucleotides
                        bdint = []                    

                        #define the last dinucleotide as the sequence length -3
                        lastdi = len(sequ) - 3
                        
                        #for nucleotide starting at position 2 (3rd position of first codon) and ending at the last position with a step of 3 (one codon)
                        for d in range(2,lastdi, 3):
                        
                            #store dinucleotide
                            dint = str(sequ[d] + sequ[d+1])
                            #append it to the bridge dinucleotide list
                            bdint.append(dint)


                        #create dictionary that will get keys of amino acid pairs and values of lists of synonymous bridge dinucleotides for this pair
                        obsbridge = {}
                        
                        #for each item in the dn list
                        for i in range(len(bdint)):
                        
                            #create the amino acid pair
                            bridgeaa = str(aalist[i] + aalist[i+1])
                            
                            #if this amino acid pair has not been added to the list already, 
                            #update the dictionary with the pair as key and the relevant dn in the value list
                            if bridgeaa not in obsbridge:
                                    obsbridge.update({bridgeaa:[bdint[i]]})
                                    
                            #if it has already been added as a key, append the new dn to the list of that key
                            else:
                                    obsbridge[bridgeaa].append(bdint[i])
                       
     

                        #set all the variables to 0
                        sdu = 0
                        k = 0

                        #for each amino acid pair key in the observed synonymous dn dictionary 
                        for dia in obsbridge:
                                
                            #if the pair is in the dictionary -> can use the dn of interest synonymously
                            if dia in thedictionary:
                                
                                #store the synonymous dn list for that aa pair
                                dibridgelist = obsbridge[dia]
                                
                                #k is counting the total number of amino acid pairs of interest observed
                                k = k + len(dibridgelist)
                                
                                #count the number of dn of interest in the list 
                                num_obs = dibridgelist.count(thedinucleotide)
                         
                                #make the proportion of the dn of interest over all synonymous dns used
                                prop_obs = num_obs/len(dibridgelist)
                                
                                #store the expected proportion of the dn under equal synonymous usage for the aa pair
                                prop_exp = thedictionary[dia]
                                
                        ####    WEIGHTING    ####
                                
                                #store the sdu for this aa pair as proportion observed over proportion expected dn timed by the number of occurences of this aa pair
                                sdu_i = (prop_obs/prop_exp)*len(dibridgelist)
                                
                                #sum all sdu values in the loop
                                sdu = sdu + sdu_i
                        
                        #calculate the  final sdu value
                        sdu = sdu/k
                        

                        #########################
                        
                        
                        #if this is the first sequence in the seq list, add that outside the inner list (observed sdu)
                        if c == 0:
                            if samples == 'none':
                                results.update({name:[sdu]})
                            else:
                                results.update({name:[sdu,[]]}) 
                                
                        #if this is not the first sequence, add it inside the inner list (modelled sdu)
                        if c > 0:
                            results[name][1].append(sdu)
                        
                        c = c + 1
                        
                        
                            
 


                   
                #pos1 or 2

                

                if (pos == 'pos1' or pos == 'pos2'):
 
                    name = str(str(dinuc) + str(pos))
                    
                    if name not in noninfo:
                    
                        c = 0
                        
                        
                        for sequ in all_the_seqs:
                        
                            posdint = []
                            for d in range(pos_start,len(sequ), 3):
                                dint = str(sequ[d] + sequ[d+1])
                                posdint.append(dint)
                                                              
                            obspos = {}
                            for i in range(len(posdint)):
                                aa = aalist[i]
                                if aa not in obspos:
                                        obspos.update({aa:[posdint[i]]})
                                else:
                                        obspos[aa].append(posdint[i])
                                
                            
                            
                            sdu = 0
                            k = 0
                            for aa in obspos:
                                if aa in thedictionary:
                                    di2list = obspos[aa]
                                    k = k + len(di2list)
                                    num_obs = di2list.count(thedinucleotide)
                                    prop_obs = num_obs/len(di2list)
                                    prop_exp = thedictionary[aa]
                                    sdu_i = (prop_obs/prop_exp)*len(di2list)
                                    sdu = sdu + sdu_i
                            sdu = sdu/k
                            
                            if c == 0:
                                if samples == 'none':
                                    results.update({name:[sdu]})
                                else:
                                    results.update({name:[sdu,[]]})
                                
                            if c > 0:
                                results[name][1].append(sdu)                            
                            c = c + 1
                                    
        all_results.update({rec.id:results})

    ##########################


    return all_results
    

##########################   







#dinucl should be a list like: ['CpC', 'CpG', 'CpU', 'CpA', 'GpC', 'GpG', 'GpU', 'GpA', 'UpC', 'UpG', 'UpU', 'UpA', 'ApC', 'ApG', 'ApU', 'ApA']
#position should also be a list: ['pos1', 'pos2', 'bridge']

	
def RSDU(fasta_file, dinucl, position = ['bridge'], samples = 'none'):    



    #define all results dictionary    
    all_results = {}



    #parse the multiple sequence fasta file
    records = SeqIO.parse(fasta_file, "fasta")	


    ####       FASTA        ####


    #for each sequence
    for rec in records:
    
        results = {}


        #ungap in case of an alignment
        recungap = rec.seq.ungap("-")
        
        #save sequence as string 
        seq = str(recungap)
        recungap = rec.seq.ungap("~")
        
        #save sequence as string 
        seq = str(recungap)
        
        #make all uppercase
        seq = seq.upper()
        
        #make sure it's a coding sequence
        if len(seq)%3 != 0:
            print('\n\nYour sequence length is not a multiple of 3...\n\n')
        
        
        #save amino acid sequence as string
        aa = str(recungap.translate())
        
        #remove stop codons at the end
        if aa[-1] == '*':
            aa = aa[:-1]
            seq = seq[:-3]
        
        #check for internal stop codons
        if '*' in aa:
            print('\n\nYour sequence has internal stop codons...\n\n')
        

        #the amino acid sequence list is independent of the dinucleotide CDS position
        aalist = []
                
        #for each amino acid in the sequence (range of the length of the sequence)
        for a in range(len(aa)):
        
            #append it to the aa list
            aalist.append(aa[a])       
        
        
        #list with actual sequence as the first item, followed by all the model sequences
        all_the_seqs = [seq]
        
        #if the samples option has been selected
        if samples != 'none':        
        
            #define how many random samples you take
            for i in range(samples):

                modelseq = "" 

                #for each amino acid in the translated sequence
                for a in aa:
                
                    #randomly select one possible synonymous codon for the amino acid
                    ran_cod = random.choice(syco[a])
                    
                    #add the randomly selected codon to the model sequence
                    modelseq = modelseq + ran_cod
                    
                #add model sequence to the sequence list
                all_the_seqs.append(modelseq)
       


        #for each dinucleotide provided in the argument list
        for dinuc in dinucl:
        
            #for each position provided in the argument list
            for pos in position:
            
            
            
                ####        PARAMETERS        ####
                
                #define the parameters mapping to each dinucleotide and position
        
                if dinuc == 'CpC':
                    thedinucleotide = 'CC'
                    if pos == 'bridge':
                        thedictionary = CpCbridge
                    if pos == 'pos1':
                        thedictionary = CpCpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = CpCpos2
                        pos_start = 1


                if dinuc == 'CpG':
                    thedinucleotide = 'CG'
                    if pos == 'bridge':
                        thedictionary = CpGbridge
                    if pos == 'pos1':
                        thedictionary = CpGpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = CpGpos2
                        pos_start = 1


                if dinuc == 'CpU':
                    thedinucleotide = 'CT'
                    if pos == 'bridge':
                        thedictionary = CpUbridge
                    if pos == 'pos1':
                        thedictionary = CpUpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = CpUpos2
                        pos_start = 1


                if dinuc == 'CpA':
                    thedinucleotide = 'CA'
                    if pos == 'bridge':
                        thedictionary = CpAbridge
                    if pos == 'pos1':
                        thedictionary = CpApos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = CpApos2
                        pos_start = 1


                if dinuc == 'GpC':
                    thedinucleotide = 'GC'
                    if pos == 'bridge':
                        thedictionary = GpCbridge
                    if pos == 'pos1':
                        thedictionary = GpCpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = GpCpos2
                        pos_start = 1


                if dinuc == 'GpG':
                    thedinucleotide = 'GG'
                    if pos == 'bridge':
                        thedictionary = GpGbridge
                    if pos == 'pos1':
                        thedictionary = GpGpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = GpGpos2
                        pos_start = 1


                if dinuc == 'GpU':
                    thedinucleotide = 'GT'
                    if pos == 'bridge':
                        thedictionary = GpUbridge
                    if pos == 'pos1':
                        thedictionary = GpUpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = GpUpos2
                        pos_start = 1


                if dinuc == 'GpA':
                    thedinucleotide = 'GA'
                    if pos == 'bridge':
                        thedictionary = GpAbridge
                    if pos == 'pos1':
                        thedictionary = GpApos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = GpApos2
                        pos_start = 1


                if dinuc == 'UpC':
                    thedinucleotide = 'TC'
                    if pos == 'bridge':
                        thedictionary = UpCbridge
                    if pos == 'pos1':
                        thedictionary = UpCpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = UpCpos2
                        pos_start = 1


                if dinuc == 'UpG':
                    thedinucleotide = 'TG'
                    if pos == 'bridge':
                        thedictionary = UpGbridge
                    if pos == 'pos1':
                        thedictionary = UpGpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = UpGpos2
                        pos_start = 1


                if dinuc == 'UpU':
                    thedinucleotide = 'TT'
                    if pos == 'bridge':
                        thedictionary = UpUbridge
                    if pos == 'pos1':
                        thedictionary = UpUpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = UpUpos2
                        pos_start = 1


                if dinuc == 'UpA':
                    thedinucleotide = 'TA'
                    if pos == 'bridge':
                        thedictionary = UpAbridge
                    if pos == 'pos1':
                        thedictionary = UpApos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = UpApos2
                        pos_start = 1


                if dinuc == 'ApC':
                    thedinucleotide = 'AC'
                    if pos == 'bridge':
                        thedictionary = ApCbridge
                    if pos == 'pos1':
                        thedictionary = ApCpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = ApCpos2
                        pos_start = 1


                if dinuc == 'ApG':
                    thedinucleotide = 'AG'
                    if pos == 'bridge':
                        thedictionary = ApGbridge
                    if pos == 'pos1':
                        thedictionary = ApGpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = ApGpos2
                        pos_start = 1


                if dinuc == 'ApU':
                    thedinucleotide = 'AT'
                    if pos == 'bridge':
                        thedictionary = ApUbridge
                    if pos == 'pos1':
                        thedictionary = ApUpos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = ApUpos2
                        pos_start = 1


                if dinuc == 'ApA':
                    thedinucleotide = 'AA'
                    if pos == 'bridge':
                        thedictionary = ApAbridge
                    if pos == 'pos1':
                        thedictionary = ApApos1
                        pos_start = 0
                    if pos == 'pos2':
                        thedictionary = ApApos2
                        pos_start = 1

                ##########################

                        

                ####   CALCULATIONS    ####  


                #bridge

                
                if pos == 'bridge':
                
                    #define the name of dinucleotide and position you are executing in this loop 
                    name = str(str(dinuc) + str(pos))
                    
                    #making sure that at least one informative aa is in the sequence, so that the denominator is not 0
                    noz = 0
                    for theaa in list(thedictionary):
                        doubleaalist = [x+y for x,y in zip(aalist[0::2], aalist[1::2])]
                        if theaa in doubleaalist:
                            noz = noz + 1                    
                    
                    if noz >0:
                        
                        #use this counter to separate first sequence in the list from the model ones
                        c = 0
                        #calculate sdu for the observed sequence and all the model sequences
                        for sequ in all_the_seqs:
      
                        
                            #create lists for bridge dinucleotides
                            bdint = []                    

                            #define the last dinucleotide as the sequuence length -3
                            lastdi = len(sequ) - 3
                            
                            #for nucleotide starting at position 2 (3rd position of first codon) and ending at the last position with a step of 3 (one codon)
                            for d in range(2,lastdi, 3):
                            
                                #store dinucleotide
                                dint = str(sequ[d] + sequ[d+1])
                                #append it to the bridge dinucleotide list
                                bdint.append(dint)


                            #create dictionary that will get keys of amino acid pairs and values of lists of synonymous bridge dinucleotides for this pair
                            obsbridge = {}
                            
                            #for each item in the dn list
                            for i in range(len(bdint)):
                            
                                #create the amino acid pair
                                bridgeaa = str(aalist[i] + aalist[i+1])
                                
                                #if this amino acid pair has not been added to the list already, 
                                #update the dictionary with the pair as key and the relevant dn in the value list
                                if bridgeaa not in obsbridge:
                                        obsbridge.update({bridgeaa:[bdint[i]]})
                                        
                                #if it has already been added as a key, append the new dn to the list of that key
                                else:
                                        obsbridge[bridgeaa].append(bdint[i])
                           
         

                            #set all the variables to 0
                            rsdu = 0
                            sdu = 0
                            sdu_max = 0

                            #for each amino acid pair key in the observed synonymous dn dictionary 
                            for dia in obsbridge:
                                    
                                #if the pair is in the dictionary -> can use the dn of interest synonymously
                                if dia in thedictionary:
                                    
                                    #store the synonymous dn list for that aa pair
                                    dibridgelist = obsbridge[dia]
                                    
                                    #count the number of dn of interest in the list 
                                    num_obs = dibridgelist.count(thedinucleotide)
                             
                                    #make the proportion of the dn of interest over all synonymous dns used
                                    prop_obs = num_obs/len(dibridgelist)
                                    
                                    #store the expected proportion of the dn under equal synonymous usage for the aa pair
                                    prop_exp = thedictionary[dia]
                                    
                            ####    WEIGHTED    ####
                                    
                                    #store the sdu for this aa pair as proportion observed over proportion expected dn timed by the number of occurences of this aa pair
                                    sdu_i = (prop_obs/prop_exp)*len(dibridgelist)
                                    
                                    #define the rsdu denominator
                                    sdu_max_i = (1/prop_exp)*len(dibridgelist)
                                    
                                    #sum all sdu values in the loop
                                    sdu = sdu + sdu_i
                                    
                                    #sum all the denominators
                                    sdu_max = sdu_max + sdu_max_i

                            rsdu = sdu/sdu_max
                            

                            ########################
                            
                            
                            #if this is the first sequence in the seq list, add that outside the inner list (observed rsdu)
                            if c == 0:
                                if samples == 'none':
                                    results.update({name:[rsdu]})
                                else:
                                    results.update({name:[rsdu,[]]}) 
                            
                            #if this is not the first sequence, add it inside the inner list (modelled rsdu)
                            if c > 0:
                                results[name][1].append(rsdu)
                            
                            c = c + 1
                            
                    else:
                        if samples == 'none':
                            results.update({name:['NA']})
                        else:
                            results.update({name:['NA',['NA']]})                            
                            
                                
 


                   
                #pos1 or 2

                

                if (pos == 'pos1' or pos == 'pos2'):
 
                    name = str(str(dinuc) + str(pos))
                    
                    if name not in noninfo:
                    
                        c = 0
                        
                        noz = 0
                        for thea in list(thedictionary):
                            if thea in aalist:
                                noz = noz + 1
                                
                        if noz > 0:
                        
                            for sequ in all_the_seqs:
                            
                                posdint = []
                                for d in range(pos_start,len(sequ), 3):
                                    dint = str(sequ[d] + sequ[d+1])
                                    posdint.append(dint)
                                           
                            
                                obspos = {}
                                for i in range(len(posdint)):
                                    aa = aalist[i]
                                    if aa not in obspos:
                                            obspos.update({aa:[posdint[i]]})
                                    else:
                                            obspos[aa].append(posdint[i])
                                    
                                
                                rsdu = 0
                                sdu = 0
                                sdu_max = 0
                                for aa in obspos:
                                    if aa in thedictionary:
                                        di2list = obspos[aa]
                                        num_obs = di2list.count(thedinucleotide)
                                        prop_obs = num_obs/len(di2list)
                                        prop_exp = thedictionary[aa]
                                        sdu_i = (prop_obs/prop_exp)*len(di2list)
                                        sdu_max_i = (1/prop_exp)*len(di2list)
                                        sdu = sdu + sdu_i
                                        sdu_max = sdu_max + sdu_max_i
                                rsdu = sdu/sdu_max
                                
                                if c == 0:
                                    if samples == 'none':
                                        results.update({name:[rsdu]})
                                    else:
                                        results.update({name:[rsdu,[]]}) 
                                if c > 0:
                                    results[name][1].append(rsdu)                            
                                c = c + 1
                        
                        else:
                            if samples == 'none':
                                results.update({name:['NA']})
                            else:
                                results.update({name:['NA',['NA']]})
                        
        all_results.update({rec.id:results})

    ##########################


    return all_results
    
   
##########################   
   
   
   
   
   

####    TABLE   ####
   
   
def dict_to_tsv(dictionary, output_name, error = 'none'):

    table_out = "acc\t"

    first_accession = list(dictionary)[0]
    #this takes care of the table's header
    for i in range(len(list(dictionary[first_accession]))):
    
        this_position = list(dictionary[first_accession])[i]
        
        if error == 'none':
        
            error_head = ''

        if error == 'stdev':
        
            error_head = str(this_position + '_lowSTDEV\t' + this_position + '_highSTDEV\t')

        if error == 'sem':
        
            error_head = str(this_position + '_lowSEM\t' + this_position + '_highSEM\t')
        
        if error == 'extrema':
        
            error_head = str(this_position + '_errorMin\t' + this_position + '_errorMax\t')
        
        add = str(this_position + '\t' + error_head)
        
        table_out = table_out + add
        
    table_out = str(table_out + '\n')

    #for each accession key in the outer dictionary
    for i in range(len(list(dictionary))):
    
        acc = list(dictionary)[i]
        
        acc_dict = dictionary[acc]
        
        table_out = str(table_out + acc + '\t')
        
        #for each position key in the inner dictionary
        for p in range(len(acc_dict)):
        
            pos_list = acc_dict[list(acc_dict)[p]]
            
            #the observed sequence's value 
            the_value = pos_list[0]
                       
            table_out = table_out + str(str(the_value) + '\t')
            
            if error != 'none':
                
                #takes care of not available RSDU values (none of the informative values amino acids in the sequence)
                if the_value != 'NA':
                    
                    #list of samplestrap sequence calculation
                    model_values = pos_list[1]
                    
                    #sample size
                    n = len(model_values)
                    
                    #mean
                    m = (sum(model_values)/n)
     
                    #calculate standard deviation
                    sdnum = 0
                    for s in model_values:
                        thenum = (s-m)**2
                        sdnum = sdnum + thenum
                    stdev = math.sqrt(sdnum/(n-1))
                         
                    if error == 'stdev':

                        error_add = str(str(m-stdev) + '\t' + str(m+stdev) + '\t')
                        
                        table_out = table_out + error_add
                    
                    if error == 'sem':
                    
                        #standard error of the mean
                        sem = stdev/math.sqrt(n)
                        
                        error_add = str(str(m-sem) + '\t' + str(m+sem) + '\t')
                        
                        table_out = table_out + error_add                
                    
                    if error == 'extrema':
                    
                        #maximum
                        maxi = max(model_values)
                        #minimum
                        mini = min(model_values)
                        
                        error_add = str(str(mini) + '\t' + str(maxi) + '\t')
                        
                        table_out = table_out + error_add 
                
                else:
                
                    table_out = str(table_out + 'NA\tNA\t')
                
        table_out = str(table_out[:-1] + '\n')
        
    table_out = table_out[:-1]

    out = open(output_name, "w+")
    out.write(table_out)
    out.close()    
    
    return print(table_out)
   
   
  ##########################

